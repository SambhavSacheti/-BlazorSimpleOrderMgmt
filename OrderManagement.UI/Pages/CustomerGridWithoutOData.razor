
@inject DialogService dialogService
@using OrderManagement.Shared.Models
@inject HttpClient Http
@page "/CustomerGridWithoutOData"

<h2>Page Naviagation without Odata</h2>


@if (Customers == null)
{
    <p><em>Loading...</em></p>
}
else{
<RadzenGrid AllowSorting="true"   Data=@Customers  AllowPaging="true" TItem="Customer" ColumnWidth="200px" PageSize=10 RowDoubleClick="RowSelected">
<Columns>
    <RadzenGridColumn TItem="Customer" Context="data"   Property="Avatar_Url" Width="50px">
    <Template>
        <img src="@data.Avatar_Url" />
    </Template>
    </RadzenGridColumn>
    <RadzenGridColumn TItem="Customer" Property="first_name" Title="First Name" />
    <RadzenGridColumn TItem="Customer" Context="data" Property="last_name" Title="Last Name" />
    <RadzenGridColumn TItem="Customer" Context="data" Property="gender" Title="gender" />
    <RadzenGridColumn TItem="Customer" Property="Address1" Title="Address 1" />
    <RadzenGridColumn TItem="Customer" Property="City" Title="City" />

</Columns>
</RadzenGrid>
}
@code{
    [Parameter]
    public Customer[] Customers { get; set; }

    private Customer _selectedCustomer { get; set; }


    async void Open(string title)
    {
        await InvokeAsync(() => { StateHasChanged(); });
    }

    protected override async Task OnInitializedAsync()
    {
        Customers = await Http.GetFromJsonAsync<Customer[]>(@"https://localhost:2001/api/customer");
        dialogService.OnClose += Close;
    }

    private void Close(dynamic result)
    {
        try
        {
            (bool isEdited, Customer editedCustomer) = ((bool, Customer))result;

            if (!isEdited)
                return;

            for (int i = 0; i < Customers.Count(); i++)
            {
                if (Customers[i].id == editedCustomer.id)
                {
                    Customers[i] = editedCustomer;
                    break;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

        StateHasChanged();
    }

    private void RowSelected(Customer customer)
    {
        Console.WriteLine(customer);
        dialogService.Open<AddEditForm>($"Customer: {customer.first_name} {customer.last_name}",
              new Dictionary<string, object>() { { "customer", customer } });
    }



}